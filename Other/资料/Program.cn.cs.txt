using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
//using System.Windows;
using System.Runtime.InteropServices;
using System.Threading;

/*
  midiInOpen，开启一个midi设备，原型如下：
MMRESULT midiInOpen(
  LPHMIDIIN lphMidiIn,  //指向handle的指针
  UINT uDeviceID,	//设备id，可能的选择是0~总数-1，通常生成一个midi设备列表，交给用户选择，如果只有一个设备，就写0即可
  DWORD_PTR dwCallback, //消息的回调函数指针，也可以是线程的指针，窗口的指针
  DWORD_PTR dwCallbackInstance, //给回调函数传入用户附近参数的指针，不需要时可以传入null
  DWORD dwFlags		//flag，具体参见api文档
);

midiInGetNumDevs，获取当前的midi设备总数，用来判断当前是否有可用的midi设备，如果为0，则说明没有可用设备。
 UINT midiInGetNumDevs(void);

MidiInProc callback function，用来获取消息的回调函数指针，原型如下
void CALLBACK MidiInProc(
  HMIDIIN hMidiIn,	//设备handle
  UINT wMsg,		//传来的消息号
  DWORD_PTR dwInstance, //用户参数指针，如果没传入一般为null
  DWORD_PTR dwParam1,	//参数1
  DWORD_PTR dwParam2	//参数2
);
*/

namespace MIDI
{

    public class InputPort
    {
        private NativeMethods.MidiInProc midiInProc;
        private IntPtr handle;


        public InputPort()
        {
            midiInProc = new NativeMethods.MidiInProc(MidiProc);
            handle = IntPtr.Zero;
        }


        public static int InputCount
        {
            get { return NativeMethods.midiInGetNumDevs(); }
        }


        public bool Close()
        {
            bool result = NativeMethods.midiInClose(handle)
                == NativeMethods.MMSYSERR_NOERROR;
            handle = IntPtr.Zero;
            return result;
        }


        public bool Open(int id)
        {
            return NativeMethods.midiInOpen(
                out handle,   //HMIDIIN
                id,			  //id
                midiInProc,   //CallBack
                IntPtr.Zero,  //CallBack Instance
                NativeMethods.CALLBACK_FUNCTION)  //flag
                    == NativeMethods.MMSYSERR_NOERROR;
        }


        public bool Start()
        {
            return NativeMethods.midiInStart(handle)
                == NativeMethods.MMSYSERR_NOERROR;
        }


        public bool Stop()
        {
            return NativeMethods.midiInStop(handle)
                == NativeMethods.MMSYSERR_NOERROR;
        }


        private void MidiProc(IntPtr hMidiIn,
            uint wMsg,
            IntPtr dwInstance,
            uint dwParam1,
            uint dwParam2)
        {
            // Receive messages here
            if (dwParam1 > 1000 && dwParam1 < 100000)
            {
                Console.Write("{0}\t{1}\t{2}", wMsg, dwParam1, dwParam2);

                if (wMsg == 963)
                {
                    dwParam1 = dwParam1 & 0xFFFF;
                    uint h_dw1 = 0;
                    uint l_dw1 = 0;
                    h_dw1 = dwParam1 & 0xFF;
                    l_dw1 = (dwParam1 >> 8) & 0xFF;

                    Console.Write("\t0x" + Convert.ToString(wMsg, 16));
                    Console.Write("\t0x" + Convert.ToString(h_dw1, 16));
                    Console.Write("\t0x" + Convert.ToString(l_dw1, 16));
                    Console.Write("\t0x" + Convert.ToString(dwParam1, 16));
                    Console.Write("\t0x" + Convert.ToString(dwParam2, 16) + "\n");
                    //Console.WriteLine("-------------------------------");
                }
                else
                {
                    Console.WriteLine(Convert.ToString(wMsg, 16));
                    Console.WriteLine(Convert.ToString(dwParam1, 16));
                    Console.WriteLine(Convert.ToString(dwParam2, 16));
                    Console.WriteLine("-------------------------------");
                }
            }
        }


        public static void Main(String[] args)
        {
            StreamWriter myFile = File.CreateText("aaa.log");
            Console.WriteLine("Hello");
            InputPort ip = new InputPort();
            Console.WriteLine("devices-sum:{0}", InputPort.InputCount);
            ip.Open(0);
            ip.Start();
            try
            {
                while (true)
                {
                    Thread.Sleep(1);
                }
            }
            catch (Exception e)
            {


            }
            finally
            {
                ip.Stop();
                ip.Close();
                Console.WriteLine("Bye~");
            }
        }
    }


    internal static class NativeMethods
    {
        internal const int MMSYSERR_NOERROR = 0;
        internal const int CALLBACK_FUNCTION = 0x00030000;


        internal delegate void MidiInProc(
            IntPtr hMidiIn,
            uint wMsg,
            IntPtr dwInstance,
            uint dwParam1,
            uint dwParam2);


        [DllImport("winmm.dll")]
        internal static extern int midiInGetNumDevs();


        [DllImport("winmm.dll")]
        internal static extern int midiInClose(
            IntPtr hMidiIn);


        [DllImport("winmm.dll")]
        internal static extern int midiInOpen(
            out IntPtr lphMidiIn,
            int uDeviceID,
            MidiInProc dwCallback,
            IntPtr dwCallbackInstance,
            int dwFlags);


        [DllImport("winmm.dll")]
        internal static extern int midiInStart(
            IntPtr hMidiIn);


        [DllImport("winmm.dll")]
        internal static extern int midiInStop(
            IntPtr hMidiIn);
    }
}
