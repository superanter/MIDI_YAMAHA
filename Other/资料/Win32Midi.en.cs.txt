using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

namespace MidiKeyboardTest
{
    class Win32Midi
    {
        /// <summary>
        /// The midiInGetNumDevs function retrieves the number of MIDI input devices in the system.
        /// UINT midiInGetNumDevs(void);
        /// </summary>
        /// <returns>
        /// Returns the number of MIDI input devices present in the system. A return value of zero means that there are no devices (not that there is no error).
        /// </returns>
        [DllImport("winmm.dll", EntryPoint = "midiInGetNumDevs")]
        public static extern uint MidiInGetNumDevs();

        /// <summary>
        /// The midiInGetDevCaps function determines the capabilities of a specified MIDI input device.
        /// MMRESULT midiInGetDevCaps(
        ///     UINT uDeviceID,
        ///     LPMIDIINCAPS lpMidiInCaps,
        ///     UINT cbMidiInCaps
        /// );
        /// </summary>
        /// <param name="uDeviceId">Identifier of the MIDI input device. The device identifier varies from zero to one less than the number of devices present. This parameter can also be a properly cast device handle.</param>
        /// <param name="lpMidiInCaps">Pointer to a MIDIINCAPS structure that is filled with information about the capabilities of the device.</param>
        /// <param name="cbMidiInCaps">Size, in bytes, of the MIDIINCAPS structure. Only cbMidiInCaps bytes (or less) of information is copied to the location pointed to by lpMidiInCaps. If cbMidiInCaps is zero, nothing is copied, and the function returns MMSYSERR_NOERROR.</param>
        /// <returns>
        /// Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.
        /// MMSYSERR_BADDEVICEID:    The specified device identifier is out of range.
        /// MMSYSERR_INVALPARAM: The specified pointer or structure is invalid.
        /// MMSYSERR_NODRIVER:   The driver is not installed.
        /// MMSYSERR_NOMEM:  The system is unable to allocate or lock memory.
        /// </returns>
        [DllImport("winmm.dll", EntryPoint = "midiInGetDevCaps")]
        public static extern uint MidiInGetDevCaps(uint uDeviceId, ref MidiInCaps lpMidiInCaps, uint cbMidiInCaps);

        /// <summary>
        /// typedef struct {
        ///     WORD      wMid;
        ///     WORD      wPid;
        ///     MMVERSION vDriverVersion;
        ///     TCHAR     szPname[MAXPNAMELEN];
        ///     DWORD     dwSupport;
        /// } MIDIINCAPS;
        /// </summary>
        [StructLayout(LayoutKind.Sequential)]
        public struct MidiInCaps
        {
            /// <summary>
            /// Manufacturer identifier of the device driver for the MIDI input device. Manufacturer identifiers are defined in Manufacturer and Product Identifiers.
            /// </summary>
            public UInt16 mid;

            /// <summary>
            /// Product identifier of the MIDI input device. Product identifiers are defined in Manufacturer and Product Identifiers.
            /// </summary>
            public UInt16 pid;

            /// <summary>
            /// Version number of the device driver for the MIDI input device. The high-order byte is the major version number, and the low-order byte is the minor version number.
            /// </summary>
            public uint mmversion;

            /// <summary>
            /// Product name in a null-terminated string.
            /// </summary>
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = MaxPNameLen)]
            public string pname;

            /// <summary>
            /// Reserved; must be zero.
            /// </summary>
            public uint support;
        }

        /// <summary>
        /// #define MAXPNAMELEN      32     /* max product name length (including NULL) */
        /// </summary>
        public const int MaxPNameLen = 32;

        /// <summary>
        /// The midiInOpen function opens a specified MIDI input device.
        /// MMRESULT midiInOpen(
        ///     LPHMIDIIN lphMidiIn,
        ///     UINT uDeviceID,
        ///     DWORD dwCallback,
        ///     DWORD dwCallbackInstance,
        ///     DWORD dwFlags
        /// );
        /// </summary>
        /// <param name="lphMidiIn">Pointer to an HMIDIIN handle. This location is filled with a handle identifying the opened MIDI input device. The handle is used to identify the device in calls to other MIDI input functions.</param>
        /// <param name="uDeviceID">Identifier of the MIDI input device to be opened.</param>
        /// <param name="dwCallback">Pointer to a callback function, a thread identifier, or a handle of a window called with information about incoming MIDI messages. For more information on the callback function, see MidiInProc.</param>
        /// <param name="dwCallbackInstance">User instance data passed to the callback function. This parameter is not used with window callback functions or threads.</param>
        /// <param name="dwFlags">
        /// Callback flag for opening the device and, optionally, a status flag that helps regulate rapid data transfers. It can be the following values.
        /// CALLBACK_FUNCTION:   The dwCallback parameter is a callback procedure address.
        /// CALLBACK_NULL:   There is no callback mechanism. This value is the default setting.
        /// CALLBACK_THREAD: The dwCallback parameter is a thread identifier.
        /// CALLBACK_WINDOW: The dwCallback parameter is a window handle.
        /// MIDI_IO_STATUS:  When this parameter also specifies CALLBACK_FUNCTION, MIM_MOREDATA messages are sent to the callback function as well as MIM_DATA messages. Or, if this parameter also specifies CALLBACK_WINDOW, MM_MIM_MOREDATA messages are sent to the window as well as MM_MIM_DATA messages. This flag does not affect event or thread callbacks.
        /// Most applications that use a callback mechanism will specify CALLBACK_FUNCTION for this parameter.
        /// </param>
        /// <returns>
        /// Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following/
        /// MMSYSERR_ALLOCATED:	The specified resource is already allocated.
        /// MMSYSERR_BADDEVICEID:	The specified device identifier is out of range.
        /// MMSYSERR_INVALFLAG:	The flags specified bydwFlagsare invalid.
        /// MMSYSERR_INVALPARAM:	The specified pointer or structure is invalid.
        /// MMSYSERR_NOMEM"	The system is unable to allocate or lock memory.
        /// </returns>
        [DllImport("winmm.dll", EntryPoint = "midiInOpen")]
        public static extern uint MidiInOpen(ref IntPtr lphMidiIn, uint uDeviceID, IntPtr dwCallback, IntPtr dwCallbackInstance, uint dwFlags);

        public delegate void MidiInOpenCallback(IntPtr hdrvr, uint msg, uint user, uint dw1, uint dw2);

        /// <summary>
        /// #define CALLBACK_FUNCTION   0x00030000l    /* dwCallback is a FARPROC */
        /// </summary>
        public const uint CallbackFunction = 0x00030001;

        /// <summary>
        /// The midiInClose function closes the specified MIDI input device.
        /// MMRESULT midiInClose(
        ///   HMIDIIN hMidiIn 
        /// );
        /// </summary>
        /// <param name="hMidiIn">Handle to the MIDI input device. If the function is successful, the handle is no longer valid after the call to this function.</param>
        /// <returns>
        /// Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.
        /// MIDIERR_STILLPLAYING:	Buffers are still in the queue.
        /// MMSYSERR_INVALHANDLE:	The specified device handle is invalid.
        /// MMSYSERR_NOMEM:	The system is unable to allocate or lock memory.
        /// </returns>
        [DllImport("winmm.dll", EntryPoint = "midiInClose")]
        public static extern uint midiInClose(ref IntPtr hMidiIn);

        public const uint MMSysErrNoError = 0;

        /// <summary>
        /// The midiInGetErrorText function retrieves a textual description for an error identified by the specified error code.
        /// MMRESULT midiInGetErrorText(
        ///   MMRESULT wError,
        ///   LPSTR lpText,
        ///   UINT cchText
        /// );
        /// </summary>
        /// <param name="wError">Error code.</param>
        /// <param name="lpText">Pointer to the buffer to be filled with the textual error description.</param>
        /// <param name="cchText">Length, in characters, of the buffer pointed to by lpText.</param>
        /// <returns>Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.
        /// MMSYSERR_BADERRNUM: The specified error number is out of range.
        /// MMSYSERR_INVALPARAM:  The specified pointer or structure is invalid.
        /// MMSYSERR_NOMEM:  The system is unable to allocate or lock memory. 
        /// </returns>
        [DllImport("winmm.dll", EntryPoint = "midiInGetErrorText")]
        public static extern uint MidiInGetErrorText(uint wError, StringBuilder lpText, uint cchText);

        /// <summary>
        /// The midiInStart function starts MIDI input on the specified MIDI input device.
        /// MMRESULT midiInStart(
        ///   HMIDIIN hMidiIn 
        /// );
        /// </summary>
        /// <param name="hMidiIn">Handle to the MIDI input device.</param>
        /// <returns>
        /// Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following
        /// MMSYSERR_INVALHANDLE:    The specified device handle is invalid.
        /// </returns>
        [DllImport("winmm.dll", EntryPoint = "midiInStart")]
        public static extern uint MidiInStart(IntPtr hMidiIn);

        /// <summary>
        /// The midiInStop function stops MIDI input on the specified MIDI input device.
        /// MMRESULT midiInStop(
        ///   HMIDIIN hMidiIn 
        /// );
        /// </summary>
        /// <param name="hMidiIn">Handle to the MIDI input device.</param>
        /// <returns>
        /// Returns MMSYSERR_NOERROR if successful or an error otherwise. Possible error values include the following.
        /// MMSYSERR_INVALHANDLE: The specified device handle is invalid.
        /// </returns>
        [DllImport("winmm.dll", EntryPoint = "midiInStop")]
        public static extern uint MidiInStop(IntPtr hMidiIn);
    }
}
